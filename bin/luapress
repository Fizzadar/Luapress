#!/usr/bin/env lua

-- Luapress
-- File: bin/luapress
-- Desc: Luapress CLI

local os = os
local print = print
local table = table
local pairs = pairs
local ipairs = ipairs

local luapress_config = require('luapress.config')
local util = require('luapress.util')
local cli = require('luapress.lib.cli')

local help_doc = [[
Luapress v]] .. luapress_config.version .. [[


Usage:
    luapress [options]
    luapress (ENV | URL) [options]
    luapress init URL
    luapress --help

Options:
    ENV           Build against different directories/urls with environments.
    URL           Build with a different base url.
    init          Start new blog in the current directory.
    URL           Default base URL for the new blog.
    --template    Templating language use for new blog. Options: mustache, lhtml, etlua.
    --watch       Watch post/page changes and rebuild each time.
    -h --help     Show this help screen.
    --version     Show version.]]


-- Store opts
local opts = {
    -- Unamed args, parsed later
    env = nil,
    url = nil,
    -- Booleans for arg_to_opt below
    init = false,
    watch = false,
    help = false,
    version = false,
    -- Default templating language is mustache
    custom_template = false,
}

-- Parse named/boolean opts, capture other opts
new_arg = {}
arg_to_opt = {
    ['--watch'] = 'watch',
    ['init'] = 'init',
    ['-h'] = 'help',
    ['--help'] = 'help',
    ['--version'] = 'version',
    ['--template'] = 'custom_template',
}

for key, value in ipairs(arg) do
    if arg_to_opt[value] then
        opts[arg_to_opt[value]] = true

    -- Unknown arg? Attach to new_arg
    else
        table.insert(new_arg, value)
    end
end


-- Handle help output/exit
if opts.help then
    print(help_doc)
    os.exit()
end

-- Handle version output/exit
if opts.version then
    cli.exit('Luapress v' .. luapress_config.version)
end


-- OK, we're doing something
local lfs = require('lfs')
local luapress = require('luapress')

-- Get and validate template type
local template_type = 'mustache'
if opts.custom_template then
  template_type = new_arg[2]
  local valid_types = Set {'mustache', 'lhtml', 'etlua'}
  if not valid_types[template_type] then 
    cli.error('Invalid template parameter, please specify mustache, lhtml or etlua ')
  end
end


-- Init?
if opts.init then
    local url = new_arg[1]
    if not url then
        cli.error('Missing URL parameter, please use: luapress init URL')
    end

    local status, err = luapress.make_skeleton(lfs.currentdir(), url, template_type)
    if err then
        cli.error(err)
    end

    cli.exit(
        'All ready! Just drop markdown files into ./posts & ./pages and run luapress'
    )


-- Build!
else
    print('### Luapress v' .. luapress_config.version)
    print()

    -- Check if we have an URL or ENV
    local env_or_url = new_arg[1]
    local env, url

    if env_or_url then
        -- If alphanumeric, env
        if env_or_url:find('^%w+$') then
            env = env_or_url

        -- Otherwise, url
        else
            url = env_or_url
        end
    end

    -- Add current path to package.path to ensure Windows will load config.lua
    -- Must follow this order, to avoid problems with luapress.default_config
    package.path = package.path..";"..lfs.currentdir()..'/config.lua'

    -- Ensure local config file
    local _, err = io.open('config.lua', 'r')
    if err then
        cli.error('Could not locate ./config.lua, have you run `luapress init URL`?')
    end

    -- Load the local config file into a global variable.
    config = require('config')

    -- Get the default config, apply them to config
    local default_config = require('luapress.default_config')
    for key, value in pairs(default_config) do
        if config[key] == nil then
            config[key] = value
        end
    end

    -- If url is set via args, it overrides all
    if url then
        config.url = url
    end

    -- If env is set, pull it's data and override url/build_dir on config
    if env then
        env_data = config.envs[env]
        if not env_data then
            cli.error('Missing environment: ' .. tostring(env))
        end

        -- Apply the env, both build_dir and url are optional
        config.build_dir = env_data.build_dir or config.build_dir
        config.url = env_data.url or config.url
    end

    -- Got no url?
    if not config.url then
        cli.error('No url set in config.lua or passed in via arguments!')
    end

    -- Attach other opts to config
    config.root = lfs.currentdir()
    -- location of the bin directory (probably /usr/local/lib/luarocks/rocks/luapress/*/)
    config.base = util.get_install_dir()

    -- Ensure the build directory
    luapress.make_build()

    local function build()
        -- Build the blog
        local status, err = luapress.build()
        if err then
            cli.error(err)
        end

        print()
        cli.log(
            'Press complete! Upload ./' .. config.build_dir .. ' to your website',
            'green'
        )
    end

    -- Watching?
    if opts.watch then
        local posix_test = os.execute('uname')
        if not posix_test then
            cli.error('Sorry, only POSIX systems support --watch.')
        end

        local watch_directory = require('luapress.lib.watch_directory')
        watch_directory({
            'posts', 'pages',
            'templates/' .. config.template
        }, build)

    -- Normal build
    else
        build()
    end

    os.exit()
end

cli.error('Unknown mode/arguments? This should never appear.')
